name: Android CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_android_app:
    name: Build Android App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x android_app_kotlin/gradlew
        working-directory: ./

      - name: Build with Gradle
        run: ./gradlew assembleDebug
        working-directory: ./android_app_kotlin

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug.apk
          path: android_app_kotlin/app/build/outputs/apk/debug/app-debug.apk

  run_codeceptjs_tests:
    name: Run CodeceptJS Tests
    needs: build_android_app
    runs-on: macos-latest # Appium/Android emulator typically requires macOS or Linux with KVM
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Or the version specified in your project

      - name: Download APK
        uses: actions/download-artifact@v4
        with:
          name: app-debug.apk
          path: CodeceptJs/apps/

      - name: Rename APK
        run: mv CodeceptJs/apps/app-debug.apk CodeceptJs/apps/date-time-checker.apk

      - name: Install Appium globally
        run: npm install -g appium

      - name: Install project dependencies
        working-directory: ./CodeceptJs
        run: npm install

      - name: Install Appium globally
        run: npm install -g appium --driver uiautomator2 # Ensure UiAutomator2 driver is installed

      - name: Start Appium server in background
        run: appium &
        shell: bash # Ensure Appium runs in the background correctly

      - name: Wait for Appium to start
        run: |
          echo "Waiting for Appium to start..."
          npx wait-on http://127.0.0.1:4723/wd/hub/status -t 60000 # Wait for 60 seconds
        shell: bash

      - name: Run Android Emulator and execute tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 33 # Matches platformVersion in codecept.conf.js (Android 13)
          target: default
          arch: x86_64 # Or x86, depending on what's available/faster
          profile: Nexus 6 # Example profile
          script: |
            echo "Emulator started. Running CodeceptJS tests..."
            cd CodeceptJs
            npm run codeceptjs
          # Ensure ANDROID_HOME is correctly picked up by Appium/CodeceptJS
          # The reactivecircus action sets ANDROID_HOME and ANDROID_SDK_ROOT

      - name: Stop Appium Server
        if: always() # Ensure Appium is stopped even if tests fail
        run: |
          echo "Stopping Appium server..."
          pkill -f appium # This is a simple way; might need to be more robust
        shell: bash
